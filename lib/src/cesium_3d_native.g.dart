// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:cesium_3d_native/cesium_3d_native.dart')
library;

import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function()>()
external void CesiumTileset_initialize();

@ffi.Native<ffi.Pointer<CesiumTileset> Function(ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CesiumTileset> CesiumTileset_create(
  ffi.Pointer<ffi.Char> url,
);

@ffi.Native<
    ffi.Pointer<CesiumTileset> Function(ffi.Int64, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CesiumTileset> CesiumTileset_createFromIonAsset(
  int assetId,
  ffi.Pointer<ffi.Char> accessToken,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_hasLoadError(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<CesiumTileset>, ffi.Pointer<ffi.Char>)>()
external void CesiumTileset_getErrorMessage(
  ffi.Pointer<CesiumTileset> tileset,
  ffi.Pointer<ffi.Char> out,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CesiumTileset>)>()
external void CesiumTileset_destroy(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<
    CesiumViewState Function(
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double)>()
external CesiumViewState CesiumTileset_createViewState(
  double positionX,
  double positionY,
  double positionZ,
  double directionX,
  double directionY,
  double directionZ,
  double upX,
  double upY,
  double upZ,
  double viewportWidth,
  double viewportHeight,
  double horizontalFov,
  double verticalFov,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>, CesiumViewState)>()
external int CesiumTileset_updateView(
  ffi.Pointer<CesiumTileset> tileset,
  CesiumViewState viewState,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_getTileCount(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<CesiumTileset>, ffi.Int,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>()
external void CesiumTileset_getTileRenderData(
  ffi.Pointer<CesiumTileset> tileset,
  int index,
  ffi.Pointer<ffi.Pointer<ffi.Void>> renderData,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTile>)>()
external int CesiumTileset_getTileLoadState(
  ffi.Pointer<CesiumTile> tile,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTileset>, ffi.Int)>()
external int CesiumTileset_getTileContentType(
  ffi.Pointer<CesiumTileset> tileset,
  int index,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_getNumberOfTilesLoaded(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<ffi.Pointer<CesiumTile> Function(ffi.Pointer<CesiumTileset>)>()
external ffi.Pointer<CesiumTile> CesiumTileset_getRootTile(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CesiumTileset>)>()
external void CesiumTileset_checkRoot(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<ffi.Pointer<ffi.Void> Function(ffi.Pointer<CesiumTile>)>()
external ffi.Pointer<ffi.Void> CesiumTileset_getFirstRenderContent(
  ffi.Pointer<CesiumTile> tile,
);

final class CesiumTileset extends ffi.Opaque {}

final class CesiumTile extends ffi.Opaque {}

abstract class CesiumTileLoadState {
  static const int CT_LS_UNLOADING = -2;
  static const int CT_LS_FAILED_TEMPORARILY = -1;
  static const int CT_LS_UNLOADED = 0;
  static const int CT_LS_CONTENT_LOADING = 1;
  static const int CT_LS_CONTENT_LOADED = 2;
  static const int CT_LS_DONE = 3;
  static const int CT_LS_FAILED = 4;
}

abstract class CesiumTileContentType {
  static const int CT_TC_EMPTY = 0;
  static const int CT_TC_RENDER = 1;
  static const int CT_TC_EXTERNAL = 2;
  static const int CT_TC_UNKNOWN = 3;
  static const int CT_TC_ERROR = 4;
}

final class CesiumViewState extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> position;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> direction;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> up;

  @ffi.Double()
  external double viewportWidth;

  @ffi.Double()
  external double viewportHeight;

  @ffi.Double()
  external double horizontalFov;

  @ffi.Double()
  external double verticalFov;
}
