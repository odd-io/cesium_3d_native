// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
@ffi.DefaultAsset('package:cesium_3d_native/cesium_3d_native.dart')
library;

import 'dart:ffi' as ffi;

@ffi.Native<ffi.Void Function()>()
external void CesiumTileset_initialize();

@ffi.Native<ffi.Pointer<CesiumTileset> Function(ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CesiumTileset> CesiumTileset_create(
  ffi.Pointer<ffi.Char> url,
);

@ffi.Native<
    ffi.Pointer<CesiumTileset> Function(ffi.Int64, ffi.Pointer<ffi.Char>)>()
external ffi.Pointer<CesiumTileset> CesiumTileset_createFromIonAsset(
  int assetId,
  ffi.Pointer<ffi.Char> accessToken,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_getNumTilesLoaded(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_hasLoadError(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<CesiumTileset>, ffi.Pointer<ffi.Char>)>()
external void CesiumTileset_getErrorMessage(
  ffi.Pointer<CesiumTileset> tileset,
  ffi.Pointer<ffi.Char> out,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CesiumTileset>)>()
external void CesiumTileset_destroy(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<
    CesiumViewState Function(
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double,
        ffi.Double)>()
external CesiumViewState CesiumTileset_createViewState(
  double positionX,
  double positionY,
  double positionZ,
  double directionX,
  double directionY,
  double directionZ,
  double upX,
  double upY,
  double upZ,
  double viewportWidth,
  double viewportHeight,
  double horizontalFov,
);

@ffi.Native<ffi.Int Function(ffi.Pointer<CesiumTileset>, CesiumViewState)>()
external int CesiumTileset_updateView(
  ffi.Pointer<CesiumTileset> tileset,
  CesiumViewState viewState,
);

@ffi.Native<
    ffi.Pointer<CesiumTile> Function(ffi.Pointer<CesiumTileset>, ffi.Int)>()
external ffi.Pointer<CesiumTile> CesiumTileset_getTileToRenderThisFrame(
  ffi.Pointer<CesiumTileset> tileset,
  int index,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<CesiumTileset>, ffi.Int,
        ffi.Pointer<ffi.Pointer<ffi.Void>>)>()
external void CesiumTileset_getTileRenderData(
  ffi.Pointer<CesiumTileset> tileset,
  int index,
  ffi.Pointer<ffi.Pointer<ffi.Void>> renderData,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTile>)>()
external int CesiumTileset_getTileLoadState(
  ffi.Pointer<CesiumTile> tile,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTile>)>()
external int CesiumTileset_getTileContentType(
  ffi.Pointer<CesiumTile> tile,
);

@ffi.Native<
    ffi.Void Function(ffi.Pointer<CesiumTile>,
        ffi.Pointer<CesiumTilesetRenderContentTraversalResult>)>()
external void CesiumTileset_getRenderableTiles(
  ffi.Pointer<CesiumTile> cesiumTile,
  ffi.Pointer<CesiumTilesetRenderContentTraversalResult> out,
);

@ffi.Native<ffi.Int32 Function(ffi.Pointer<CesiumTileset>)>()
external int CesiumTileset_getNumberOfTilesLoaded(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<ffi.Pointer<CesiumTile> Function(ffi.Pointer<CesiumTileset>)>()
external ffi.Pointer<CesiumTile> CesiumTileset_getRootTile(
  ffi.Pointer<CesiumTileset> tileset,
);

@ffi.Native<CesiumBoundingVolume Function(ffi.Pointer<CesiumTile>)>()
external CesiumBoundingVolume CesiumTile_getBoundingVolume(
  ffi.Pointer<CesiumTile> tile,
);

@ffi.Native<double3 Function(ffi.Pointer<CesiumTile>)>()
external double3 CesiumTile_getBoundingVolumeCenter(
  ffi.Pointer<CesiumTile> tile,
);

@ffi.Native<ffi.Void Function(ffi.Pointer<CesiumTile>)>()
external void CesiumTile_traverse(
  ffi.Pointer<CesiumTile> tile,
);

final class CesiumTileset extends ffi.Opaque {}

final class CesiumTile extends ffi.Opaque {}

final class CesiumTilesetRenderContent extends ffi.Opaque {}

final class CesiumTilesetRenderContentTraversalResult extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<CesiumTilesetRenderContent>> renderContent;

  @ffi.Int32()
  external int numRenderContent;
}

abstract class CesiumTileLoadState {
  static const int CT_LS_UNLOADING = -2;
  static const int CT_LS_FAILED_TEMPORARILY = -1;
  static const int CT_LS_UNLOADED = 0;
  static const int CT_LS_CONTENT_LOADING = 1;
  static const int CT_LS_CONTENT_LOADED = 2;
  static const int CT_LS_DONE = 3;
  static const int CT_LS_FAILED = 4;
}

abstract class CesiumTileContentType {
  static const int CT_TC_EMPTY = 0;
  static const int CT_TC_RENDER = 1;
  static const int CT_TC_EXTERNAL = 2;
  static const int CT_TC_UNKNOWN = 3;
  static const int CT_TC_ERROR = 4;
}

final class double3 extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}

final class CesiumViewState extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> position;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> direction;

  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> up;

  @ffi.Double()
  external double viewportWidth;

  @ffi.Double()
  external double viewportHeight;

  @ffi.Double()
  external double horizontalFov;
}

final class CesiumBoundingSphere extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> center;

  @ffi.Double()
  external double radius;
}

final class CesiumOrientedBoundingBox extends ffi.Struct {
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Double> center;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> halfAxes;
}

final class CesiumBoundingRegion extends ffi.Struct {
  @ffi.Double()
  external double west;

  @ffi.Double()
  external double south;

  @ffi.Double()
  external double east;

  @ffi.Double()
  external double north;

  @ffi.Double()
  external double minimumHeight;

  @ffi.Double()
  external double maximumHeight;
}

abstract class CesiumBoundingVolumeType {
  static const int CT_BV_SPHERE = 0;
  static const int CT_BV_ORIENTED_BOX = 1;
  static const int CT_BV_REGION = 2;
}

final class CesiumBoundingVolume extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external UnnamedUnion1 volume;
}

final class UnnamedUnion1 extends ffi.Union {
  external CesiumBoundingSphere sphere;

  external CesiumOrientedBoundingBox orientedBox;

  external CesiumBoundingRegion region;
}
